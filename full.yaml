AWSTemplateFormatVersion: '2010-09-09'
Description: Wiz Exercise

Parameters:
  MyKeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Select the keypair to use for the Mongo EC2
  MyBucketName:
    Type: String
    Description: Enter the name of the S3 bucket to create for Mongo backups
  MongoUser:
    Type: String
    Description: Mongo user for connection string
  MongoPassword:
    Type: String
    Description: Mongo password for connection string

# TODO: Pull Mongo creds from Secrets Manager

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true

  MyInternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway
    DependsOn:
      - MyVPC
      - MyInternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone: !Select
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: true
    DependsOn: 
      - MyVPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
    DependsOn: 
      - MyVPC

  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref MyInternetGateway
    DependsOn: 
      - PublicRouteTable
      - MyInternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable
    DependsOn: 
      - PublicSubnet
      - PublicRouteTable

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH access from me only
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 71.246.13.84/32
    DependsOn: 
      - MyVPC

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref MyBucketName
# TODO: Configure to be public

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3ReadAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:GetObject
                Resource: arn:aws:s3:::fink-mongo-files/*
              - Effect: Allow
                Action: s3:*
                Resource:
                  - !Sub ${S3Bucket.Arn}
                  - !Sub ${S3Bucket.Arn}/*
              - Effect: Allow
                Action: ec2:*
                Resource: '*'

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: EC2Role
    DependsOn:
      - EC2Role

  MongoInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-050273e9c99f741c6  # Bitnami MongoDB 7.0.9-0 AMI
      InstanceType: t2.micro
      SecurityGroupIds:
        - !Ref MySecurityGroup
      KeyName: !Ref MyKeyPair
      SubnetId: !Ref PublicSubnet
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt update
          apt upgrade

          aws s3 cp s3://fink-mongo-files/* /usr/local/bin
          chown root:bitnami /usr/local/bin/*
          chmod 770 /usr/local/bin/*

          mkdir -p /home/bitnami/.mongodb
          chown bitnami:bitnami /home/bitnami/.mongodb
          chmod 770 /home/bitnami/.mongodb

          cat >> /home/bitnami/.mongodb/mongo_backups<< EOF
          MONGO_USER=${MongoUser}
          MONGO_PASS=${MongoPassword}
          BACKUP_ROOT_FOLDER=/home/bitnami/backups
          S3_BUCKET=${S3Bucket}
          EOF
          chown bitnami:bitnami /home/bitnami/.mongodb/mongo_backups
          chmod 600 /home/bitnami/.mongodb/mongo_backups

          crontab -l > crontab_new
          echo "0 0 * * * /usr/local/bin/mongo_backups.sh" >> crontab_new
          crontab crontab_new
          rm crontab_new
    DependsOn:
      - PublicSubnet
      - MySecurityGroup
      - S3Bucket
      - EC2InstanceProfile


  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "10.0.2.0/24"
      AvailabilityZone: !Select
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
    DependsOn: 
      - MyVPC

  EKSMasterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
      Policies:
        - PolicyName: EKSNodePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:Describe*'
                  - 'ec2:List*'
                Resource: '*'

  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  MyEKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: my-eks-cluster
      Version: 1.29
      RoleArn: !GetAtt EKSMasterRole.Arn
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref PrivateSubnet
        SecurityGroupIds:
          - !Ref MySecurityGroup
    DependsOn: 
      - PrivateSubnet
      - MySecurityGroup
      - EKSMasterRole

  MyNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref MyEKSCluster
      NodegroupName: my-node-group
      ScalingConfig:
        DesiredSize: 1
        MinSize: 1
        MaxSize: 1
      InstanceTypes:
        - t3a.medium
      NodeRole: !GetAtt NodeInstanceRole.Arn
      Subnets:
        - !Ref PrivateSubnet
    DependsOn: 
      - MyEKSCluster
      - NodeInstanceRole
      - PrivateSubnet

  MyNLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: my-nlb
      Scheme: internet-facing
      Subnets: !Ref PublicSubnet
      Type: network
      Tags:
        - Key: Name
          Value: my-nlb
    DependsOn: 
      - PublicSubnet

  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: TCP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200
      Port: 8080
      Protocol: TCP
      TargetType: ip
      UnhealthyThresholdCount: 2
      VpcId: !Ref MyVPC
    DependsOn: 
      - MyVPC

  MyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup
      LoadBalancerArn: !Ref MyNLB
      Port: 50080
      Protocol: TCP
    DependsOn: 
      - MyTargetGroup
      - MyNLB

  # MyEIP:
  #   Type: AWS::EC2::EIP

  # MyNATGateway:
  #   Type: AWS::EC2::NatGateway
  #   Properties:
  #     AllocationId: !GetAtt MyEIP.AllocationId
  #     SubnetId: !Ref PublicSubnet
  #   DependsOn: 
  #     - MyEIP
  #     - PublicSubnet

Outputs:
  EKSClusterName:
    Description: The name of the Amazon EKS cluster
    Value: !Ref MyEKSCluster
  EKSClusterEndpoint:
    Description: The endpoint for the EKS cluster
    Value: !GetAtt MyEKSCluster.Endpoint
  NLBDNSName:
    Description: The DNS name of the public NLB
    Value: !GetAtt MyNLB.DNSName
  MongoIP:
    Description: Mongo IP
    Value: !GetAtt MongoInstance.PublicIp
