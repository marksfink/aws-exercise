AWSTemplateFormatVersion: '2010-09-09'
Description: AWS Exercise

Parameters:
  DeploymentBucketName:
    Type: String
    Description: Existing S3 bucket with deployment files
    Default: fink-exercise-files
  BackupBucketName:
    Type: String
    Description: S3 bucket to create for Mongo backups
    Default: fink-mongo-backups
  MyKeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Select the keypair to use for the Mongo EC2
    Default: mongo
  MongoUser:
    Type: String
    Description: Mongo user for tasky and backups
    Default: mark
  MongoPassword:
    Type: String
    Description: Mongo password for tasky and backups
  YourIPAddress:
    Type: String
    Description: IP address allowed for SSH traffic.  Be sure to add /32 at the end.
  EKSClusterName:
    Type: String
    Description: EKS Cluster Name
    Default: my-eks-cluster

# TODO: Pull Mongo creds from Secrets Manager

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true

  MyInternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone: !Select
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: kubernetes.io/role/elb
          Value: 1

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref MyInternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  MongoSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow limited SSH and Mongo from EKS
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref YourIPAddress
        - IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017
          SourceSecurityGroupId: !GetAtt MyEKSCluster.ClusterSecurityGroupId

  BackupBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BackupBucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        IgnorePublicAcls: false
        BlockPublicPolicy: false
        RestrictPublicBuckets: false

  MongoEC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole

  MongoEC2Policy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: MongoEC2Policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 
              - s3:GetObject
              - s3:ListBucket
            Resource:
              - !Sub arn:aws:s3:::${DeploymentBucketName}
              - !Sub arn:aws:s3:::${DeploymentBucketName}/*
          - Effect: Allow
            Action: s3:*
            Resource:
              - !Sub ${BackupBucket.Arn}
              - !Sub ${BackupBucket.Arn}/*
          - Effect: Allow
            Action: ec2:*
            Resource: '*'
      Roles:
        - !Ref MongoEC2Role

  MongoEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: MongoEC2Role

  MongoInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-050273e9c99f741c6  # Bitnami MongoDB 7.0.9-0 AMI
      InstanceType: t2.micro
      SecurityGroupIds:
        - !Ref MongoSecurityGroup
      KeyName: !Ref MyKeyPair
      SubnetId: !Ref PublicSubnet
      IamInstanceProfile: !Ref MongoEC2InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt update
          apt upgrade

          # Download scripts
          aws s3 sync s3://${DeploymentBucketName} /usr/local/bin
          chown root:bitnami /usr/local/bin/*
          chmod 770 /usr/local/bin/*

          # Create mongo config directory in home folder
          mkdir -p /home/bitnami/.mongodb
          chown bitnami:bitnami /home/bitnami/.mongodb
          chmod 770 /home/bitnami/.mongodb

          # Securely store mongo user creds for backups
          cat >> /home/bitnami/.mongodb/mongo_backups<< EOF
          MONGO_USER=${MongoUser}
          MONGO_PASS=${MongoPassword}
          BACKUP_ROOT_FOLDER=/home/bitnami/backups
          S3_BUCKET=${BackupBucket}
          EOF
          chown bitnami:bitnami /home/bitnami/.mongodb/mongo_backups
          chmod 600 /home/bitnami/.mongodb/mongo_backups

          # Run remaining config tasks.
          /usr/local/bin/config.sh

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "10.0.3.0/24"
      AvailabilityZone: !Select
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: 1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "10.0.4.0/24"
      AvailabilityZone: !Select
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: 1

  MyEIP:
    Type: AWS::EC2::EIP

  MyNATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt MyEIP.AllocationId
      SubnetId: !Ref PublicSubnet

  PrivateSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  PrivateSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref MyNATGateway

  PrivateSubnetRouteAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateSubnetRouteTable

  PrivateSubnetRouteAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateSubnetRouteTable

  EKSMasterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
      Policies:
        - PolicyName: EKSNodePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:Describe*'
                  - 'ec2:List*'
                Resource: '*'

  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  NodeInstanceELBPolicy:
    # This is needed for the AWS Load Balancer Controller
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: NodeInstanceELBPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - elasticloadbalancing:*
              - ec2:*
            Resource: '*'
      Roles:
        - !Ref NodeInstanceRole

  MyEKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref EKSClusterName
      Version: 1.29
      RoleArn: !GetAtt EKSMasterRole.Arn
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2

  MyNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref MyEKSCluster
      NodegroupName: my-node-group
      ScalingConfig:
        DesiredSize: 2
        MinSize: 2
        MaxSize: 2
      InstanceTypes:
        - t3a.medium
      NodeRole: !GetAtt NodeInstanceRole.Arn
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
    DependsOn: 
      - PrivateSubnetRouteAssociation1
      - PrivateSubnetRouteAssociation2

Outputs:
  EKSClusterName:
    Description: The name of the Amazon EKS cluster
    Value: !Ref MyEKSCluster
  EKSClusterEndpoint:
    Description: The endpoint for the EKS cluster
    Value: !GetAtt MyEKSCluster.Endpoint
  MongoIP:
    Description: Mongo IP
    Value: !GetAtt MongoInstance.PublicIp
